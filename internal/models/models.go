// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package models

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/shopspring/decimal"
)

type Tstatus string

const (
	TstatusCreated Tstatus = "created"
	TstatusSuccess Tstatus = "success"
	TstatusFailure Tstatus = "failure"
)

func (e *Tstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Tstatus(s)
	case string:
		*e = Tstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Tstatus: %T", src)
	}
	return nil
}

type NullTstatus struct {
	Tstatus Tstatus
	Valid   bool // Valid is true if Tstatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTstatus) Scan(value interface{}) error {
	if value == nil {
		ns.Tstatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Tstatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTstatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.Tstatus, nil
}

type Account struct {
	ID        int64           `json:"id"`
	Owner     string          `json:"owner"`
	Balance   decimal.Decimal `json:"balance"`
	Currency  int32           `json:"currency"`
	CreatedAt time.Time       `json:"created_at"`
	UpdatedAt time.Time       `json:"updated_at"`
	DeletedAt sql.NullTime    `json:"deleted_at"`
}

type Currency struct {
	ID        int32        `json:"id"`
	Name      string       `json:"name"`
	Abbr      string       `json:"abbr"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt time.Time    `json:"updated_at"`
	DeletedAt sql.NullTime `json:"deleted_at"`
}

type Entry struct {
	ID        int64 `json:"id"`
	AccountID int64 `json:"account_id"`
	// could be any number
	Amount    decimal.Decimal `json:"amount"`
	CreatedAt time.Time       `json:"created_at"`
}

type SchemaMigration struct {
	Version string `json:"version"`
}

type Transfer struct {
	ID    int64 `json:"id"`
	SrcID int64 `json:"src_id"`
	DstID int64 `json:"dst_id"`
	// must gte 0
	Amount    decimal.Decimal `json:"amount"`
	Status    Tstatus         `json:"status"`
	CreatedAt time.Time       `json:"created_at"`
}
