// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: transfers.sql

package models

import (
	"context"

	"github.com/shopspring/decimal"
)

const createTransferRecord = `-- name: CreateTransferRecord :one
INSERT INTO transfers (
  src_id, dst_id, amount, status
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, src_id, dst_id, amount, status, created_at
`

type CreateTransferRecordParams struct {
	SrcID  int64           `json:"src_id"`
	DstID  int64           `json:"dst_id"`
	Amount decimal.Decimal `json:"amount"`
	Status Tstatus         `json:"status"`
}

func (q *Queries) CreateTransferRecord(ctx context.Context, arg CreateTransferRecordParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransferRecord,
		arg.SrcID,
		arg.DstID,
		arg.Amount,
		arg.Status,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.SrcID,
		&i.DstID,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const doTransfer = `-- name: DoTransfer :exec
  WITH _data (id, amount) AS (
VALUES
    ($1::bigserial, -$2::decimal),
    ($3::bigserial, $4::decimal)
)
UPDATE accounts AS a
   SET balance = balance + _data.amount
  FROM _data
 WHERE a.id = _data.id
`

type DoTransferParams struct {
	Column1 int64           `json:"column_1"`
	Column2 decimal.Decimal `json:"column_2"`
	Column3 int64           `json:"column_3"`
	Column4 decimal.Decimal `json:"column_4"`
}

func (q *Queries) DoTransfer(ctx context.Context, arg DoTransferParams) error {
	_, err := q.db.ExecContext(ctx, doTransfer,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	return err
}

const updateTransferStatus = `-- name: UpdateTransferStatus :one
UPDATE transfers SET
    status = $2
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, src_id, dst_id, amount, status, created_at
`

type UpdateTransferStatusParams struct {
	ID     int64   `json:"id"`
	Status Tstatus `json:"status"`
}

func (q *Queries) UpdateTransferStatus(ctx context.Context, arg UpdateTransferStatusParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, updateTransferStatus, arg.ID, arg.Status)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.SrcID,
		&i.DstID,
		&i.Amount,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
