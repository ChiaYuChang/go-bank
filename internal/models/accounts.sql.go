// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: accounts.sql

package models

import (
	"context"
	"time"

	"github.com/shopspring/decimal"
)

const accountBalanceDeposit = `-- name: AccountBalanceDeposit :one
UPDATE accounts SET
    balance = balance + $1,
    updated_at = $2
WHERE id = $3 AND deleted_at IS NULL
RETURNING id, owner, balance, currency, created_at, updated_at, deleted_at
`

type AccountBalanceDepositParams struct {
	Balance   decimal.Decimal `json:"balance"`
	UpdatedAt time.Time       `json:"updated_at"`
	ID        int64           `json:"id"`
}

func (q *Queries) AccountBalanceDeposit(ctx context.Context, arg AccountBalanceDepositParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, accountBalanceDeposit, arg.Balance, arg.UpdatedAt, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const accountBalanceWithdraw = `-- name: AccountBalanceWithdraw :one
UPDATE accounts SET
    balance = balance - $1
WHERE id = $2 AND deleted_at IS NULL
RETURNING id, owner, balance, currency, created_at, updated_at, deleted_at
`

type AccountBalanceWithdrawParams struct {
	Balance decimal.Decimal `json:"balance"`
	ID      int64           `json:"id"`
}

func (q *Queries) AccountBalanceWithdraw(ctx context.Context, arg AccountBalanceWithdrawParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, accountBalanceWithdraw, arg.Balance, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    owner, balance, currency
) VALUES (
    $1, $2, $3
)
RETURNING id, owner, balance, currency, created_at, updated_at, deleted_at
`

type CreateAccountParams struct {
	Owner    string          `json:"owner"`
	Balance  decimal.Decimal `json:"balance"`
	Currency int32           `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Owner, arg.Balance, arg.Currency)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
UPDATE accounts SET
    deleted_at = now()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one

SELECT id, owner, balance, currency, created_at, updated_at, deleted_at FROM accounts
WHERE id = $1 AND deleted_at IS NULL
`

// -- name: BulkCreateAccounts :copyfrom
// INSERT INTO accounts (
//
//	owner, balance, currency
//
// ) VALUES (
//
//	$1, $2, $3
//
// );
func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const hardDeleteAccount = `-- name: HardDeleteAccount :exec
DELETE FROM accounts WHERE id = $1
`

func (q *Queries) HardDeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, hardDeleteAccount, id)
	return err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, owner, balance, currency, created_at, updated_at, deleted_at FROM accounts
WHERE deleted_at IS NULL
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts SET
    owner = $1,
    balance = $2,
    currency = $3,
    updated_at = $4
WHERE id = $5 AND deleted_at IS NULL
RETURNING id, owner, balance, currency, created_at, updated_at, deleted_at
`

type UpdateAccountParams struct {
	Owner     string          `json:"owner"`
	Balance   decimal.Decimal `json:"balance"`
	Currency  int32           `json:"currency"`
	UpdatedAt time.Time       `json:"updated_at"`
	ID        int64           `json:"id"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.Owner,
		arg.Balance,
		arg.Currency,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateAccountBalance = `-- name: UpdateAccountBalance :one
UPDATE accounts SET
    balance = $1,
    updated_at = $2
WHERE id = $3 AND deleted_at IS NULL
RETURNING id, owner, balance, currency, created_at, updated_at, deleted_at
`

type UpdateAccountBalanceParams struct {
	Balance   decimal.Decimal `json:"balance"`
	UpdatedAt time.Time       `json:"updated_at"`
	ID        int64           `json:"id"`
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccountBalance, arg.Balance, arg.UpdatedAt, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
