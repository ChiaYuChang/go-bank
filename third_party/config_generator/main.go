package main

import (
	"fmt"
	"log"
	"os"
	"strings"
	"time"

	"github.com/joho/godotenv"
	"gitlab.com/gjerry134679/bank/third_party/config_generator/sqlc"
	"gitlab.com/gjerry134679/bank/third_party/config_generator/sqlc/gen"
	"gopkg.in/yaml.v3"
)

func GenSqlcConfig() {
	err := godotenv.Load()
	if err != nil {
		log.Fatalf("error while reading .env file: %v", err)
	}
	config := sqlc.NewSQLCConfig()
	postgresSQL := sqlc.NewSQL(
		os.Getenv("SQLC_SCHEMA"),
		os.Getenv("SQLC_QUERIES"),
		sqlc.SQLCEngn(os.Getenv("SQLC_ENGINE")),
	)
	goGen := gen.NewGoGen(
		os.Getenv("SQLC_GEN_PKG"),
		os.Getenv("SQLC_GEN_OUT"),
	)
	goGen.GoEmitOpts = &gen.GoEmitOpts{
		JsonTags:        true,
		PreparedQureies: false,
		Interface:       false,
		ExactTableNames: false,
	}
	goGen.Overrides = append(
		goGen.Overrides, &gen.Override{
			DBType: "pg_catalog.numeric",
			GoType: "github.com/shopspring/decimal.Decimal",
		},
	)
	goGen.Overrides = append(
		goGen.Overrides, &gen.Override{
			DBType:   "pg_catalog.numeric",
			GoType:   "github.com/shopspring/decimal.Decimal",
			Nullable: true,
		},
	)
	postgresSQL.Gen[sqlc.Golang] = goGen
	config.SQL = append(config.SQL, postgresSQL)
	yml, err := yaml.Marshal(config)

	sb := strings.Builder{}
	sb.WriteString("# Code generated by config_generator. DO NOT EDIT.\n")
	sb.WriteString("# Update third_party/config_generator/gen/sqlc.go and .env\n")
	sb.WriteString(fmt.Sprintf("# Generate at: %v\n", time.Now().Format(time.UnixDate)))
	sb.Write(yml)

	if err != nil {
		log.Panicln(err)
	}
	fmt.Printf("%s", sb.String())
}

func main() {
	GenSqlcConfig()
}
